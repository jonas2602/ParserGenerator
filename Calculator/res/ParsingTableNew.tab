Avaliable Tokens:
[Index] [Name]
0 WS
1 LEXERID
2 ARROW
3 QUESTIONMARK
4 CHARSET
5 STAR
6 PLUS
7 DOT
8 LITERAL
9 PARSERID
10 SEMICOLON
11 COLON
12 PIPE
13 RP
14 LP

Avaliable Non Terminals:
[Index] [Name]
0 action
1 anytime
2 lexerconst
3 lexerrule
4 once
5 operator
6 optional
7 parserconst
8 parserlist
9 parseror
10 parserrule
11 range
12 regex
13 rulelist

Table Entries:
([NonTerminal], [Token]) -> [Rule]
[action(0), ARROW(2)] -> 0 ARROW PARSERID
[action(0), SEMICOLON(10)] -> 1 EPSILON
[anytime(1), LEXERID(1)] -> 0 lexerconst STAR
[anytime(1), ARROW(2)] -> 0 lexerconst STAR
[anytime(1), QUESTIONMARK(3)] -> 0 lexerconst STAR
[anytime(1), CHARSET(4)] -> 0 lexerconst STAR
[anytime(1), STAR(5)] -> 0 lexerconst STAR
[anytime(1), PLUS(6)] -> 0 lexerconst STAR
[anytime(1), DOT(7)] -> 0 lexerconst STAR
[anytime(1), LITERAL(8)] -> 0 lexerconst STAR
[anytime(1), SEMICOLON(10)] -> 0 lexerconst STAR
[anytime(1), PIPE(12)] -> 0 lexerconst STAR
[anytime(1), RP(13)] -> 0 lexerconst STAR
[anytime(1), LP(14)] -> 0 lexerconst STAR
[lexerconst(2), LEXERID(1)] -> 2 LEXERID
[lexerconst(2), ARROW(2)] -> 5 range
[lexerconst(2), QUESTIONMARK(3)] -> 5 range
[lexerconst(2), CHARSET(4)] -> 0 CHARSET
[lexerconst(2), STAR(5)] -> 5 range
[lexerconst(2), PLUS(6)] -> 5 range
[lexerconst(2), DOT(7)] -> 1 DOT
[lexerconst(2), LITERAL(8)] -> 3 LITERAL
[lexerconst(2), SEMICOLON(10)] -> 5 range
[lexerconst(2), PIPE(12)] -> 5 range
[lexerconst(2), RP(13)] -> 5 range
[lexerconst(2), LP(14)] -> 4 LP regex RP
[lexerrule(3), LEXERID(1)] -> 0 LEXERID COLON regex action SEMICOLON
[lexerrule(3), PARSERID(9)] -> 1 EPSILON
[once(4), LEXERID(1)] -> 0 lexerconst PLUS
[once(4), ARROW(2)] -> 0 lexerconst PLUS
[once(4), QUESTIONMARK(3)] -> 0 lexerconst PLUS
[once(4), CHARSET(4)] -> 0 lexerconst PLUS
[once(4), STAR(5)] -> 0 lexerconst PLUS
[once(4), PLUS(6)] -> 0 lexerconst PLUS
[once(4), DOT(7)] -> 0 lexerconst PLUS
[once(4), LITERAL(8)] -> 0 lexerconst PLUS
[once(4), SEMICOLON(10)] -> 0 lexerconst PLUS
[once(4), PIPE(12)] -> 0 lexerconst PLUS
[once(4), RP(13)] -> 0 lexerconst PLUS
[once(4), LP(14)] -> 0 lexerconst PLUS
[operator(5), LEXERID(1)] -> 0 anytime
[operator(5), ARROW(2)] -> 0 anytime
[operator(5), QUESTIONMARK(3)] -> 0 anytime
[operator(5), CHARSET(4)] -> 0 anytime
[operator(5), STAR(5)] -> 0 anytime
[operator(5), PLUS(6)] -> 0 anytime
[operator(5), DOT(7)] -> 0 anytime
[operator(5), LITERAL(8)] -> 0 anytime
[operator(5), SEMICOLON(10)] -> 0 anytime
[operator(5), PIPE(12)] -> 0 anytime
[operator(5), RP(13)] -> 0 anytime
[operator(5), LP(14)] -> 0 anytime
[optional(6), LEXERID(1)] -> 0 lexerconst QUESTIONMARK
[optional(6), ARROW(2)] -> 0 lexerconst QUESTIONMARK
[optional(6), QUESTIONMARK(3)] -> 0 lexerconst QUESTIONMARK
[optional(6), CHARSET(4)] -> 0 lexerconst QUESTIONMARK
[optional(6), STAR(5)] -> 0 lexerconst QUESTIONMARK
[optional(6), PLUS(6)] -> 0 lexerconst QUESTIONMARK
[optional(6), DOT(7)] -> 0 lexerconst QUESTIONMARK
[optional(6), LITERAL(8)] -> 0 lexerconst QUESTIONMARK
[optional(6), SEMICOLON(10)] -> 0 lexerconst QUESTIONMARK
[optional(6), PIPE(12)] -> 0 lexerconst QUESTIONMARK
[optional(6), RP(13)] -> 0 lexerconst QUESTIONMARK
[optional(6), LP(14)] -> 0 lexerconst QUESTIONMARK
[parserconst(7), LEXERID(1)] -> 0 LEXERID
[parserconst(7), LITERAL(8)] -> 1 LITERAL
[parserconst(7), PARSERID(9)] -> 3 PARSERID
[parserconst(7), LP(14)] -> 2 LP parseror RP
[parserlist(8), LEXERID(1)] -> 0 parserconst
[parserlist(8), LITERAL(8)] -> 0 parserconst
[parserlist(8), PARSERID(9)] -> 0 parserconst
[parserlist(8), LP(14)] -> 0 parserconst
[parseror(9), LEXERID(1)] -> 0 parserlist
[parseror(9), LITERAL(8)] -> 0 parserlist
[parseror(9), PARSERID(9)] -> 0 parserlist
[parseror(9), LP(14)] -> 0 parserlist
[parserrule(10), LEXERID(1)] -> 1 EPSILON
[parserrule(10), PARSERID(9)] -> 0 PARSERID COLON parseror SEMICOLON
[range(11), LEXERID(1)] -> 1 EPSILON
[range(11), ARROW(2)] -> 1 EPSILON
[range(11), QUESTIONMARK(3)] -> 1 EPSILON
[range(11), CHARSET(4)] -> 1 EPSILON
[range(11), STAR(5)] -> 1 EPSILON
[range(11), PLUS(6)] -> 1 EPSILON
[range(11), DOT(7)] -> 1 EPSILON
[range(11), LITERAL(8)] -> 0 LITERAL ITERAL LITERAL
[range(11), SEMICOLON(10)] -> 1 EPSILON
[range(11), PIPE(12)] -> 1 EPSILON
[range(11), RP(13)] -> 1 EPSILON
[range(11), LP(14)] -> 1 EPSILON
[regex(12), LEXERID(1)] -> 0 operator PIPE regex regex
[regex(12), ARROW(2)] -> 0 operator PIPE regex regex
[regex(12), QUESTIONMARK(3)] -> 0 operator PIPE regex regex
[regex(12), CHARSET(4)] -> 0 operator PIPE regex regex
[regex(12), STAR(5)] -> 0 operator PIPE regex regex
[regex(12), PLUS(6)] -> 0 operator PIPE regex regex
[regex(12), DOT(7)] -> 0 operator PIPE regex regex
[regex(12), LITERAL(8)] -> 0 operator PIPE regex regex
[regex(12), SEMICOLON(10)] -> 0 operator PIPE regex regex
[regex(12), PIPE(12)] -> 0 operator PIPE regex regex
[regex(12), RP(13)] -> 0 operator PIPE regex regex
[regex(12), LP(14)] -> 0 operator PIPE regex regex
[rulelist(13), LEXERID(1)] -> 0 lexerrule rulelist
[rulelist(13), PARSERID(9)] -> 0 lexerrule rulelist

Rules:
[LocalRuleIndex] [NonTerminal] -> [Element] [Element] ...
0 action(0) -> ARROW(2) PARSERID(9)
1 action(0) -> EPSILON(-1)
0 anytime(1) -> lexerconst(2) STAR(5)
1 anytime(1) -> EPSILON(-1)
0 lexerconst(2) -> CHARSET(4)
1 lexerconst(2) -> DOT(7)
2 lexerconst(2) -> LEXERID(1)
3 lexerconst(2) -> LITERAL(8)
4 lexerconst(2) -> LP(14) regex(12) RP(13)
5 lexerconst(2) -> range(11)
0 lexerrule(3) -> LEXERID(1) COLON(11) regex(12) action(0) SEMICOLON(10)
1 lexerrule(3) -> EPSILON(-1)
0 once(4) -> lexerconst(2) PLUS(6)
1 once(4) -> EPSILON(-1)
0 operator(5) -> anytime(1)
1 operator(5) -> lexerconst(2)
2 operator(5) -> once(4)
3 operator(5) -> optional(6)
0 optional(6) -> lexerconst(2) QUESTIONMARK(3)
1 optional(6) -> EPSILON(-1)
0 parserconst(7) -> LEXERID(1)
1 parserconst(7) -> LITERAL(8)
2 parserconst(7) -> LP(14) parseror(9) RP(13)
3 parserconst(7) -> PARSERID(9)
0 parserlist(8) -> parserconst(7)
1 parserlist(8) -> parserconst(7) parserlist(8)
0 parseror(9) -> parserlist(8)
1 parseror(9) -> parserlist(8) PIPE(12) parseror(9)
0 parserrule(10) -> PARSERID(9) COLON(11) parseror(9) SEMICOLON(10)
1 parserrule(10) -> EPSILON(-1)
0 range(11) -> LITERAL(8) ITERAL(-1) LITERAL(8)
1 range(11) -> EPSILON(-1)
0 regex(12) -> operator(5) PIPE(12) regex(12) regex(12)
1 regex(12) -> operator(5) regex(12)
2 regex(12) -> EPSILON(-1)
0 rulelist(13) -> lexerrule(3) rulelist(13)
1 rulelist(13) -> parserrule(10) rulelist(13)
2 rulelist(13) -> EPSILON(-1)
