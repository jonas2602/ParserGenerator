// Grammar Parser
rulelist: (parserrule | lexerrule) rulelist | EOS;

parserrule: PARSERID COLON parseror SEMICOLON;
parseror: parserlist parseror2;
parseror2: PIPE parserlist parseror2 | ;
parserlist: parserconst parserlist | ;
parserconst: LEXERID | PARSERID | LITERAL | LP parseror RP;


lexerrule: LEXERID COLON regex action SEMICOLON;
action: ARROW PARSERID | ;
regex: lexeror regex | ;
lexeror: operatorr lexeror2;
lexeror2: PIPE operatorr lexeror2 | ;
operatorr: lexerconst operatorr2;
operatorr2: STAR | PLUS | QUESTIONMARK | ;
lexerconst: LP regex RP | LEXERID | DOT | CHARSET | LITERAL;

LP: '(';
RP: ')';
PIPE: '|';
COLON: ':';
SEMICOLON: ';';
PARSERID: [a-z][a-zA-Z0-9_]*;
LITERAL: '\''~['\\]*('\\'.~['\\]*)*'\'';

DOT: '.';
PLUS: '+';
STAR: '*';
CHARSET: '~'?'['~[\]\\]*('\\'.~[\]\\]*)*']';
QUESTIONMARK: '?';
ARROW: '->';
LEXERID: [A-Z][a-zA-Z0-9_]*;

LINECOMMENT: '//'~[\n]* -> skip;
BLOCKCOMMENT: '/''*'+(~[/*]~[*]*'*'+'/')+ -> skip;
WS: [ \n\t\r]+ -> skip;



// List Parser
//MINUS: '-';
//ESCAPED: '\\'.;
//CHAR: .;

//elements: (range | symbol)*;
//range: symbol MINUS symbol;
//symbol: MINUS | CHAR | ESCAPED;